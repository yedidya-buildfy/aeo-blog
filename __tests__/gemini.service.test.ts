import { GeminiService } from '../app/services/gemini.service';

// Mock fetch
global.fetch = jest.fn();

describe('GeminiService', () => {
  let service: GeminiService;

  beforeEach(() => {
    jest.clearAllMocks();
    process.env.GEMINI_API_KEY = 'test-api-key';
    service = new GeminiService();
  });

  describe('generateLlmsContent', () => {
    it('should generate llms.txt content for a Shopify store', async () => {
      const mockResponse = {
        candidates: [{
          content: {
            parts: [{
              text: `Test Store Brand
Your one-stop shop for quality products

Core Pages:
- Homepage: https://test-store.com
- About Us: https://test-store.com/pages/about
- Contact: https://test-store.com/pages/contact

Top Products:
1. Product 1 - https://test-store.com/products/product-1
2. Product 2 - https://test-store.com/products/product-2

Collections:
- All Products - https://test-store.com/collections/all

Policies:
- Shipping Policy: https://test-store.com/policies/shipping-policy
- Privacy Policy: https://test-store.com/policies/privacy-policy

Q&A:
Q: What are your shipping options?
A: We offer free shipping on orders over $50.

Keywords: quality products, online shopping, fast shipping`
            }]
          }
        }]
      };

      (global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve(mockResponse)
      });

      const result = await service.generateLlmsContent('https://test-store.com');

      expect(result).toContain('Test Store Brand');
      expect(result).toContain('Core Pages');
      expect(result).toContain('Top Products');
      expect(result).toContain('Collections');
      expect(result).toContain('Policies');
      expect(result).toContain('Keywords');
      
      expect(global.fetch).toHaveBeenCalledWith(
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent',
        expect.objectContaining({
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-goog-api-key': 'test-api-key'
          },
          body: expect.stringContaining('You are an AI Engine Optimization (AEO) expert')
        })
      );
    });

    it('should handle API errors gracefully', async () => {
      (global.fetch as jest.Mock).mockResolvedValue({
        ok: false,
        status: 400,
        statusText: 'Bad Request'
      });

      await expect(service.generateLlmsContent('https://test-store.com'))
        .rejects.toThrow('Gemini API error: 400 Bad Request');
    });

    it('should handle network errors', async () => {
      (global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'));

      await expect(service.generateLlmsContent('https://test-store.com'))
        .rejects.toThrow('Network error');
    });

    it('should handle empty response', async () => {
      const mockResponse = { candidates: [] };

      (global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve(mockResponse)
      });

      await expect(service.generateLlmsContent('https://test-store.com'))
        .rejects.toThrow('No content generated by Gemini API');
    });
  });

  describe('buildPrompt', () => {
    it('should build the correct AEO prompt', () => {
      const url = 'https://test-store.com';
      const result = service.buildPrompt(url);

      expect(result).toContain('You are an AI Engine Optimization (AEO) expert');
      expect(result).toContain('Crawl the given Shopify store URL');
      expect(result).toContain('production-ready llms.txt file');
      expect(result).toContain('Plain text only (no markdown, no HTML)');
      expect(result).toContain('Brand summary (1–3 lines)');
      expect(result).toContain('Core pages (Homepage, FAQ, Contact)');
      expect(result).toContain('Top products (5–10) with names + URLs');
      expect(result).toContain('Collections (up to 5) with URLs');
      expect(result).toContain('Policies (shipping, refund, privacy, terms)');
      expect(result).toContain('Short Q&A (2–4 common questions with answers)');
      expect(result).toContain('Keywords (5–15 terms)');
      expect(result).toContain(`URL: ${url}`);
      expect(result).toContain('Return only the llms body');
    });
  });
});