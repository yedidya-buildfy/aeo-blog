export class GeminiService {
  private apiKey: string;
  private baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';

  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY || '';
    if (!this.apiKey) {
      throw new Error('GEMINI_API_KEY environment variable is required');
    }
  }

  async generateLlmsContent(storeUrl: string): Promise<string> {
    console.log('=== GEMINI SERVICE DEBUG ===');
    console.log('API Key available:', !!this.apiKey);
    console.log('API Key length:', this.apiKey ? this.apiKey.length : 0);
    console.log('Store URL:', storeUrl);

    const prompt = this.buildPrompt(storeUrl);
    console.log('Prompt length:', prompt.length);

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      tools: [
        {
          "url_context": {}
        }
      ]
    };

    try {
      console.log('Making request to:', this.baseUrl);
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': this.apiKey
        },
        body: JSON.stringify(requestBody)
      });

      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);

      if (!response.ok) {
        const errorText = await response.text();
        console.log('Error response body:', errorText);
        throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const data = await response.json();
      console.log('Response data keys:', Object.keys(data));
      console.log('Candidates:', data.candidates ? data.candidates.length : 0);

      if (!data.candidates || data.candidates.length === 0) {
        console.log('Full API response:', JSON.stringify(data, null, 2));
        throw new Error('No content generated by Gemini API');
      }

      const generatedText = data.candidates[0].content.parts[0].text;
      console.log('Generated text length:', generatedText ? generatedText.length : 0);
      console.log('=== END GEMINI DEBUG ===');

      return generatedText.trim();

    } catch (error) {
      console.error('Error calling Gemini API:', error);
      throw error;
    }
  }

  buildPrompt(storeUrl: string): string {
    return `Analyze the website at ${storeUrl} and create a comprehensive llms.txt file.

IMPORTANT: Use the actual website content to create accurate information. Write everything in English.

Follow this structure exactly:

[Brand Name]

[2-3 line brand description explaining what the company does, products/services, and target market]

Language: English
Market/Currency: [Country/Currency from website]
Contact: [Phone, email from website]

Core pages:
Homepage: ${storeUrl}
[Other important pages with full URLs]

Products:
[List 5-10 main products with names and full URLs]

Collections:
[List main product categories/collections with full URLs]

Policies:
Shipping policy: [URL if found]
Refunds/returns: [URL if found]
Privacy: [URL if found]
Terms: [URL if found]

Short answers assistants can reuse:
Q: [Common question about products/services]
A: [Helpful answer with specific details]

Q: [Another common question]
A: [Another helpful answer]

Q: [Third common question]
A: [Third helpful answer]

RULES:
- Use only plain text, no markdown or HTML
- All content must be in English
- Use actual information from the website
- Include full URLs for all links
- Make Q&A practical and helpful
- Do NOT include keywords section
- Focus on being informative and accurate`;
  }
}